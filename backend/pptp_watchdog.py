"""
PPTP Watchdog - –ú—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è PPTP —Ç—É–Ω–Ω–µ–ª–µ–π
–õ–æ–≥–∏–∫–∞: –ï—Å–ª–∏ PPTP —Ç—É–Ω–Ω–µ–ª—å –æ–Ω–ª–∞–π–Ω -> SOCKS —Ä–∞–±–æ—Ç–∞–µ—Ç
        –ï—Å–ª–∏ PPTP —Ç—É–Ω–Ω–µ–ª—å —É–ø–∞–ª -> SOCKS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""
import os
import sys
import time
import subprocess
import logging
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - PPTP_WATCHDOG - %(levelname)s - %(message)s'
)
logger = logging.getLogger("pptp_watchdog")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .env
WATCHDOG_CHECK_INTERVAL = int(os.environ.get('WATCHDOG_CHECK_INTERVAL', 180))  # 3 –º–∏–Ω—É—Ç—ã
WATCHDOG_PPTP_RETRIES = int(os.environ.get('WATCHDOG_PPTP_RETRIES', 3))
WATCHDOG_RETRY_DELAY = int(os.environ.get('WATCHDOG_RETRY_DELAY', 30))

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.environ.get('CONNEXA_DB', '/app/backend/connexa.db')
engine = create_engine(f'sqlite:///{DB_PATH}', connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


def check_pptp_tunnel(node_id: int, ppp_interface: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ PPTP —Ç—É–Ω–Ω–µ–ª—è
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    1. –ü—Ä–æ—Ü–µ—Å—Å pppd –∂–∏–≤
    2. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å pppN –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ UP
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü—Ä–æ—Ü–µ—Å—Å pppd —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            result = subprocess.run(
                ['pgrep', '-f', f'pppd.*{node_id}'],
                capture_output=True,
                timeout=5
            )
            if result.returncode != 0:
                logger.warning(f"‚ö†Ô∏è Node {node_id}: pppd –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except Exception as e:
            logger.error(f"‚ùå Node {node_id}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pppd: {e}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å UP
        try:
            result = subprocess.run(
                ['ip', 'link', 'show', ppp_interface],
                capture_output=True,
                text=True,
                timeout=5
            )
            
            if result.returncode != 0:
                logger.warning(f"‚ö†Ô∏è Node {node_id}: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å {ppp_interface} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            
            if 'state UP' not in result.stdout:
                logger.warning(f"‚ö†Ô∏è Node {node_id}: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å {ppp_interface} –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ UP")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Node {node_id}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            return False
        
        # –í—Å—ë –û–ö
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Node {node_id}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PPTP: {e}")
        return False


def check_node_with_retries(node_id: int, ppp_interface: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–∑–µ–ª —Å –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–æ–º (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–¥ FAIL)
    """
    for attempt in range(1, WATCHDOG_PPTP_RETRIES + 1):
        logger.debug(f"üîç Node {node_id}: –ü—Ä–æ–≤–µ—Ä–∫–∞ PPTP (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{WATCHDOG_PPTP_RETRIES})")
        
        if check_pptp_tunnel(node_id, ppp_interface):
            logger.debug(f"‚úÖ Node {node_id}: PPTP —Ç—É–Ω–Ω–µ–ª—å –∑–¥–æ—Ä–æ–≤")
            return True
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–¥–æ–∂–¥–∞—Ç—å
        if attempt < WATCHDOG_PPTP_RETRIES:
            logger.debug(f"‚è≥ Node {node_id}: –û–∂–∏–¥–∞–Ω–∏–µ {WATCHDOG_RETRY_DELAY} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            time.sleep(WATCHDOG_RETRY_DELAY)
    
    # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    logger.error(f"‚ùå Node {node_id}: PPTP —Ç—É–Ω–Ω–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ {WATCHDOG_PPTP_RETRIES} –ø–æ–ø—ã—Ç–æ–∫")
    return False


def watchdog_loop():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª watchdog
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É–∑–ª—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'online' –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥
    """
    logger.info(f"üîÑ PPTP Watchdog –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {WATCHDOG_CHECK_INTERVAL} —Å–µ–∫, retry: {WATCHDOG_PPTP_RETRIES})")
    
    while True:
        try:
            db = SessionLocal()
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Node
            from database import Node
            
            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ online —É–∑–ª—ã
            online_nodes = db.query(Node).filter(Node.status == 'online').all()
            
            if not online_nodes:
                logger.debug("‚ÑπÔ∏è –ù–µ—Ç online —É–∑–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            else:
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(online_nodes)} online —É–∑–ª–æ–≤...")
                
                for node in online_nodes:
                    if not node.ppp_interface:
                        logger.warning(f"‚ö†Ô∏è Node {node.id}: –ù–µ—Ç ppp_interface, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–æ–º
                    pptp_healthy = check_node_with_retries(node.id, node.ppp_interface)
                    
                    if not pptp_healthy:
                        # PPTP —Ç—É–Ω–Ω–µ–ª—å —É–ø–∞–ª -> –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ FAIL
                        logger.error(f"üí• Node {node.id}: PPTP —Ç—É–Ω–Ω–µ–ª—å —É–ø–∞–ª, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ ping_failed")
                        
                        # –û—á–∏—Å—Ç–∏—Ç—å SOCKS –¥–∞–Ω–Ω—ã–µ
                        node.status = 'ping_failed'
                        node.socks_ip = None
                        node.socks_port = None
                        node.socks_login = None
                        node.socks_password = None
                        node.ppp_interface = None
                        node.last_update = datetime.utcnow()
                        
                        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SOCKS —Å–µ—Ä–≤–∏—Å
                        try:
                            from socks_server import stop_socks_service
                            stop_socks_service(node.id)
                            logger.info(f"üõë Node {node.id}: SOCKS —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        except Exception as e:
                            logger.error(f"‚ùå Node {node.id}: –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ SOCKS: {e}")
                        
                        # –£–¥–∞–ª–∏—Ç—å PPTP —Ç—É–Ω–Ω–µ–ª—å
                        try:
                            from pptp_tunnel_manager import pptp_tunnel_manager
                            pptp_tunnel_manager.destroy_tunnel(node.id)
                            logger.info(f"üóëÔ∏è Node {node.id}: PPTP —Ç—É–Ω–Ω–µ–ª—å —É–¥–∞–ª–µ–Ω")
                        except Exception as e:
                            logger.error(f"‚ùå Node {node.id}: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è: {e}")
                    else:
                        logger.debug(f"‚úÖ Node {node.id}: PPTP —Ç—É–Ω–Ω–µ–ª—å –∑–¥–æ—Ä–æ–≤, SOCKS —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–∞–±–æ—á–∏–º")
            
            db.commit()
            db.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ watchdog loop: {e}")
            try:
                db.close()
            except:
                pass
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        logger.debug(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {WATCHDOG_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥...")
        time.sleep(WATCHDOG_CHECK_INTERVAL)


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ PPTP Watchdog...")
    try:
        watchdog_loop()
    except KeyboardInterrupt:
        logger.info("‚õî PPTP Watchdog –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (KeyboardInterrupt)")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• PPTP Watchdog –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
