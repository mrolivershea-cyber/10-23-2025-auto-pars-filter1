"""
IP Geolocation Service - ip-api.com integration
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç City/State/ZIP/Provider –ø–æ—Å–ª–µ PING LIGHT
"""
import aiohttp
import asyncio
import logging

logger = logging.getLogger(__name__)

# Rate limiting (45 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É)
_last_request_time = 0
_min_interval = 1.4  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

async def get_ip_geolocation(ip: str) -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ ip-api.com
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: city, state, zip, provider, country
    """
    global _last_request_time
    
    # Rate limiting
    now = asyncio.get_event_loop().time()
    time_since_last = now - _last_request_time
    if time_since_last < _min_interval:
        await asyncio.sleep(_min_interval - time_since_last)
    
    try:
        url = f"http://ip-api.com/json/{ip}?fields=status,message,country,regionName,city,zip,isp"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=5)) as response:
                _last_request_time = asyncio.get_event_loop().time()
                
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('status') == 'success':
                        return {
                            'success': True,
                            'country': data.get('country', ''),
                            'state': data.get('regionName', ''),  # regionName = —à—Ç–∞—Ç
                            'city': data.get('city', ''),
                            'zipcode': data.get('zip', ''),
                            'provider': data.get('isp', '')  # ISP = –ø—Ä–æ–≤–∞–π–¥–µ—Ä
                        }
                    else:
                        logger.warning(f"IP-API failed for {ip}: {data.get('message')}")
                        return {'success': False, 'error': data.get('message')}
                else:
                    logger.error(f"IP-API HTTP {response.status} for {ip}")
                    return {'success': False, 'error': f'HTTP {response.status}'}
                    
    except asyncio.TimeoutError:
        logger.error(f"IP-API timeout for {ip}")
        return {'success': False, 'error': 'Timeout'}
    except Exception as e:
        logger.error(f"IP-API error for {ip}: {e}")
        return {'success': False, 'error': str(e)}

async def enrich_node_with_geolocation(node, db_session):
    """
    –û–±–æ–≥–∞—Ç–∏—Ç—å —É–∑–µ–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –µ—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ PING LIGHT
    """
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–∞ –ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è (–µ—Å–ª–∏ –ø–æ–ª—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
    needs_geo = not node.city or not node.state or not node.zipcode or not node.provider
    
    if not needs_geo:
        logger.debug(f"Node {node.ip} already has location data, skipping IP-API")
        return False
    
    logger.info(f"üåç Getting geolocation for {node.ip} from IP-API...")
    
    geo_data = await get_ip_geolocation(node.ip)
    
    if geo_data.get('success'):
        # –û–±–Ω–æ–≤–∏—Ç—å –¢–û–õ–¨–ö–û –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
        if not node.country and geo_data.get('country'):
            node.country = geo_data['country']
        if not node.state and geo_data.get('state'):
            node.state = geo_data['state']
        if not node.city and geo_data.get('city'):
            node.city = geo_data['city']
        if not node.zipcode and geo_data.get('zipcode'):
            node.zipcode = geo_data['zipcode']
        if not node.provider and geo_data.get('provider'):
            node.provider = geo_data['provider']
        
        logger.info(f"‚úÖ Geolocation added for {node.ip}: {geo_data['city']}, {geo_data['state']}")
        return True
    else:
        logger.warning(f"‚ùå Geolocation failed for {node.ip}: {geo_data.get('error')}")
        return False
