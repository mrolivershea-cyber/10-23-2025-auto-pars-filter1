"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä SOCKS/PPTP
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ routing –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
- –û—á–∏—Å—Ç–∫–∞ –º–µ—Ä—Ç–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- –°–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
"""
import subprocess
import logging
import time
import os

logger = logging.getLogger("auto_manager")

class AutoSOCKSPPTPManager:
    def __init__(self):
        self.active_routes = {}
        
    def cleanup_dead_processes(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö pppd –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        try:
            result = subprocess.run("ps aux | grep pppd | grep -v grep | wc -l", shell=True, capture_output=True, text=True)
            count = int(result.stdout.strip())
            if count > 50:
                logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ pppd –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {count}, –æ—á–∏—â–∞—é –º–µ—Ä—Ç–≤—ã–µ...")
                subprocess.run("pkill -9 -f 'pppd.*defunct'", shell=True)
                logger.info("‚úÖ –ú–µ—Ä—Ç–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    def setup_routing_auto(self, node_id, socks_port, ppp_interface):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ routing —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            check = subprocess.run(f"ip a show {ppp_interface}", shell=True, capture_output=True)
            if check.returncode != 0:
                logger.error(f"‚ùå ppp –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å {ppp_interface} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return False
            
            # –í—ã–∑–æ–≤ link_socks_to_ppp.sh
            result = subprocess.run(f"/usr/local/bin/link_socks_to_ppp.sh {socks_port} {ppp_interface}", 
                                  shell=True, capture_output=True, text=True)
            
            if result.returncode == 0:
                logger.info(f"‚úÖ Routing –Ω–∞—Å—Ç—Ä–æ–µ–Ω: port {socks_port} -> {ppp_interface}")
                self.active_routes[node_id] = {'port': socks_port, 'ppp': ppp_interface}
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ routing: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ setup_routing_auto: {e}")
            return False
    
    def verify_routing(self, socks_port):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ routing –Ω–∞—Å—Ç—Ä–æ–µ–Ω"""
        try:
            mark = socks_port - 1080
            table = 100 + mark
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ip rule
            rule_check = subprocess.run(f"ip rule | grep 'fwmark {mark}'", shell=True, capture_output=True)
            if rule_check.returncode != 0:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç ip rule –¥–ª—è –ø–æ—Ä—Ç–∞ {socks_port}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ routing table
            table_check = subprocess.run(f"ip route show table {table}", shell=True, capture_output=True, text=True)
            if "default" not in table_check.stdout:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç default route –≤ table {table}")
                return False
            
            return True
        except:
            return False
    
    def auto_fix_routing(self, node_id, socks_port, ppp_interface):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ routing –µ—Å–ª–∏ —Å–ª–æ–º–∞–Ω"""
        if not self.verify_routing(socks_port):
            logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è—é routing –¥–ª—è port {socks_port}")
            return self.setup_routing_auto(node_id, socks_port, ppp_interface)
        return True

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auto_manager = AutoSOCKSPPTPManager()
