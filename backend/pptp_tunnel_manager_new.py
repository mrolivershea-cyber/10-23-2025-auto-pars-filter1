import subprocess
import os
import time
import logging

logger = logging.getLogger("pptp_tunnel")


class PPTPTunnelManager:
    def __init__(self):
        self.active_tunnels = {}
    
    def wait_for_ppp_ready(self, ppp_interface, timeout=20):
        """
        –ñ–¥–∞—Ç—å, –ø–æ–∫–∞ PPP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–∞–Ω–µ—Ç –≥–æ—Ç–æ–≤—ã–º
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ + IP –∞–¥—Ä–µ—Å
        """
        logger.info(f"Waiting for {ppp_interface} to become ready...")
        
        for attempt in range(timeout):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                result = subprocess.run(
                    f"ip a show {ppp_interface}",
                    shell=True,
                    capture_output=True,
                    text=True
                )
                
                if result.returncode == 0 and "inet " in result.stdout:
                    logger.info(f"‚úÖ {ppp_interface} is ready with IP")
                    return True
                
                logger.debug(f"‚è≥ {ppp_interface} not ready, attempt {attempt+1}/{timeout}")
                time.sleep(1)
                
            except Exception as e:
                logger.warning(f"Error checking {ppp_interface}: {e}")
                time.sleep(1)
        
        logger.error(f"‚ùå {ppp_interface} did not become ready after {timeout}s")
        return False
    
    def create_tunnel(self, node_id, node_ip, username, password):
        """
        –°–æ–∑–¥–∞—Ç—å PPTP —Ç—É–Ω–Ω–µ–ª—å —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        """
        try:
            cfg = f"pptp_node_{node_id}"
            peer = f"/etc/ppp/peers/{cfg}"
            os.makedirs("/etc/ppp/peers", exist_ok=True)
            
            # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é pppd
            with open(peer, 'w') as f:
                f.write(f'''pty "pptp {node_ip} --nolaunchpppd"
user {username}
password {password}
remotename PPTP
noauth
nobsdcomp
nodeflate
nodefaultroute
ipparam {node_id}
persist
maxfail 0
''')
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å pppd
            subprocess.Popen(
                f"pppd call {cfg} logfile /tmp/pptp_node_{node_id}.log".split()
            )
            logger.info(f"PPTP started for node {node_id}")
            
            # –ü–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ pppd —Å–æ–∑–¥–∞—Å—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            time.sleep(3)
            
            # –ü–æ–ª—É—á–∏—Ç—å ppp_interface –∏–∑ –±–∞–∑—ã (–µ–≥–æ –¥–æ–ª–∂–µ–Ω –∑–∞–ø–∏—Å–∞—Ç—å /etc/ppp/ip-up hook)
            from database import SessionLocal, Node
            db = SessionLocal()
            
            # –ñ–¥–∞—Ç—å –¥–æ 15 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è ppp_interface –≤ –ë–î
            max_wait = 15
            for i in range(max_wait):
                db.expire_all()  # –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ –ë–î
                node = db.query(Node).filter(Node.id == node_id).first()
                
                if node and node.ppp_interface:
                    ppp_interface = node.ppp_interface
                    logger.info(f"Found ppp_interface in DB: {ppp_interface}")
                    break
                
                logger.debug(f"Waiting for ppp_interface in DB ({i+1}/{max_wait})...")
                time.sleep(1)
            else:
                db.close()
                logger.error(f"ppp_interface not set in DB after {max_wait}s")
                return None
            
            # üîπ –ù–û–í–û–ï: –ñ–¥–∞—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PPP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            if not self.wait_for_ppp_ready(ppp_interface, timeout=20):
                db.close()
                logger.error(f"PPP interface {ppp_interface} not ready")
                return None
            
            # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å policy routing
            socks_port = 1083 + node_id
            result = subprocess.run(
                f"/usr/local/bin/link_socks_to_ppp.sh {socks_port} {ppp_interface}",
                shell=True,
                capture_output=True,
                text=True
            )
            
            if result.returncode != 0:
                logger.error(f"Failed to setup routing: {result.stderr}")
                db.close()
                return None
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É–Ω–Ω–µ–ª–µ
            tunnel_info = {
                'interface': ppp_interface,
                'local_ip': '',
                'remote_ip': '',
                'pid': 0,
                'node_ip': node_ip,
                'node_id': node_id
            }
            self.active_tunnels[node_id] = tunnel_info
            
            logger.info(f"‚úÖ Tunnel created: {ppp_interface}, routing configured")
            db.close()
            return tunnel_info
            
        except Exception as e:
            logger.error(f"Error creating tunnel for node {node_id}: {e}")
            return None
    
    def destroy_tunnel(self, node_id):
        """–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å PPTP —Ç—É–Ω–Ω–µ–ª—å"""
        try:
            # –£–±–∏—Ç—å pppd –ø—Ä–æ—Ü–µ—Å—Å
            subprocess.run(
                f"pkill -f 'pppd call pptp_node_{node_id}'",
                shell=True
            )
            
            # –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if node_id in self.active_tunnels:
                del self.active_tunnels[node_id]
            
            logger.info(f"Tunnel destroyed for node {node_id}")
            return True
        except Exception as e:
            logger.error(f"Error destroying tunnel: {e}")
            return False


pptp_tunnel_manager = PPTPTunnelManager()
